#include <iostream>
#include <conio.h>
#include <windows.h>
#include <cstdlib> //for rand() and srand()
#include <ctime> //for time()

using namespace std;

bool gameOver;
const int width = 20;
const int height = 20;
int x, y; //Snakehead coords
int fruitX, fruitY; //Fruit coords
int tailX[100], tailY[100]; //Snake tail coords
int nTail; //Length of the snake

enum eDirection { STOP = 0, LEFT, RIGHT, UP, DOWN };
eDirection dir;

void Setup() {
    srand(time(0)); //Random number generator
    gameOver = false;
    dir = STOP;
    x = width / 2;
    y = height / 2;
    fruitX = rand() % width;
    fruitY = rand() % height;
    nTail = 0;
}

void Draw() {
    system("cls"); //Clear the screen

    //Top border
    for (int i = 0; i < width + 2; i++)
        cout << "-";
    cout << endl;

    //Map
    for (int i = 0; i < height; i++) {
        cout << "|"; //Left border
        for (int j = 0; j < width; j++) {
            if (i == y && j == x)
                cout << "O"; //Snake head
            else if (i == fruitY && j == fruitX)
                cout << "F"; //Fruit
            else {
                bool printTail = false;
                for (int k = 0; k < nTail; k++) {
                    if (tailX[k] == j && tailY[k] == i) {
                        cout << "o"; //Snake tail
                        printTail = true;
                    }
                }
                if (!printTail)
                    cout << " ";
            }
        }
        cout << "|"; //Right border
        cout << endl;
    }

    //Bottom border
    for (int i = 0; i < width + 2; i++)
        cout << "-";
    cout << endl;
}

void Input() {
    if (_kbhit()) {
        switch (_getch()) {
        case 'a':
            dir = LEFT;
            break;
        case 'd':
            dir = RIGHT;
            break;
        case 'w':
            dir = UP;
            break;
        case 's':
            dir = DOWN;
            break;
        case 'x':
            gameOver = true;
            break;
        }
    }
}

void Logic() {
    //Move the tail
    int prevX = tailX[0];
    int prevY = tailY[0];
    int prev2X, prev2Y;
    tailX[0] = x;
    tailY[0] = y;
    for (int i = 1; i < nTail; i++) {
        prev2X = tailX[i];
        prev2Y = tailY[i];
        tailX[i] = prevX;
        tailY[i] = prevY;
        prevX = prev2X;
        prevY = prev2Y;
    }

    //Move the head
    switch (dir) {
    case LEFT:
        x--;
        break;
    case RIGHT:
        x++;
        break;
    case UP:
        y--;
        break;
    case DOWN:
        y++;
        break;
    default:
        break;
    }

    //Check to see if the snake hits the wall
    if (x >= width || x < 0 || y >= height || y < 0)
        gameOver = true;

    //Check to see if the snake eats the fruit
    if (x == fruitX && y == fruitY) {
        nTail++;
        fruitX = rand() % width;
        fruitY = rand() % height;
    }

    //Check to see if the snake eats itself
    for (int i = 0; i < nTail; i++) {
        if (tailX[i] == x && tailY[i] == y)
            gameOver = true;
    }
}

void ShowInstructions() {
    cout << "Welcome to Snake Game!\n";
    cout << "Use the following keys to control the snake:\n";
    cout << "W - Up\n";
    cout << "A - Left\n";
    cout << "S - Down\n";
    cout << "D - Right\n";
    cout << "Press 'X' to exit the game.\n";
    cout << "Press any key to start the game...";
    _getch(); //Wait for the user to press any key
}

int main() {
    ShowInstructions();
    Setup();
    while (!gameOver) {
        Draw();
        Input();
        Logic();
        Sleep(200); //Increase sleep time to slow down
    }
    return 0;
}
